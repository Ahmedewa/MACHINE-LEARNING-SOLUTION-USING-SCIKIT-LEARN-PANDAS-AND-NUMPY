                     USING HELM FOR KUBERNETES ORCHESTRATION

## **1. Using Helm for Kubernetes Orchestration**

### **1.1 What is Helm?**
Helm is a package manager for Kubernetes. It simplifies deploying, upgrading, and managing Kubernetes applications by using **Helm Charts**, which are pre-configured templates for Kubernetes resources.

---

### **1.2 Use Case in Our ML App**
- Automate deployment and upgrades of our app to Kubernetes.
- Manage configurations specific to different environments (e.g., dev, staging, production).
- Easily roll back deployments in case of issues.

---

### **1.3 Setting Up Helm for Your ML App**

#### **Step 1: Install Helm**
1. Install Helm using the package manager for your OS:
   ```bash
   # macOS
   brew install helm

   # Ubuntu
   curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
   ```

---

#### **Step 2: Create a Helm Chart**
1. Create a new Helm chart for your app:
   ```bash
   helm create ml-app
   ```

2. Directory structure of the newly created chart:
   ```
   ml-app/
   ├── charts/
   ├── templates/
   │   ├── deployment.yaml
   │   ├── service.yaml
   │   └── _helpers.tpl
   ├── values.yaml
   └── Chart.yaml
   ```

---

#### **Step 3: Customize Helm Templates**
1. **Edit `values.yaml`** to define parameters for your app:
   ```yaml
   replicaCount: 2

   image:
     repository: ml-app
     tag: latest
     pullPolicy: IfNotPresent

   service:
     type: LoadBalancer
     port: 80

   resources:
     limits:
       cpu: "500m"
       memory: "512Mi"
   ```

2. **Edit `deployment.yaml`** in the `templates` folder:
   ```yaml
   apiVersion: apps/v1
   kind: Deployment
   metadata:
     name: {{ .Chart.Name }}
   spec:
     replicas: {{ .Values.replicaCount }}
     selector:
       matchLabels:
         app: {{ .Chart.Name }}
     template:
       metadata:
         labels:
           app: {{ .Chart.Name }}
       spec:
         containers:
         - name: {{ .Chart.Name }}
           image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
           ports:
           - containerPort: 5000
           resources:
             limits:
               cpu: {{ .Values.resources.limits.cpu }}
               memory: {{ .Values.resources.limits.memory }}
   ```

---

#### **Step 4: Deploy Your App Using Helm**
1. Package and deploy the Helm chart:
   ```bash
   helm install ml-app ./ml-app
   ```

2. Verify the deployment:
   ```bash
   kubectl get all
   ```

3. Upgrade the app with new changes:
   ```bash
   helm upgrade ml-app ./ml-app
   ```

---

#### **Best Practices for Helm**
1. **Use Values Files for Environments**:
   - Create separate `values` files for dev, staging, and production.
   - Deploy with:
     ```bash
     helm install ml-app ./ml-app -f values-prod.yaml
     ```

2. **Version Control Your Helm Charts**:
   - Store charts in a Git repository and use semantic versioning.

3. **Enable Rollbacks**:
   - Use `helm rollback` to revert to previous versions in case of issues:
     ```bash
     helm rollback ml-app 1
     ```

---

