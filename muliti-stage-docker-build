                MULTI-STAGE BUILDS IN DOCKER

## **1. Multi-Stage Builds in Docker**

### **1.1 What Are Multi-Stage Builds?**
Multi-stage builds in Docker allow us to create more efficient images by separating the building and runtime stages into multiple layers. This approach reduces the final image size and improves efficiency by including only the essential files and dependencies in the production image.

---

### **1.2Multi-Stage Build for a Scikit-learn Project**

#### **Step 1: Create a Dockerfile**
```dockerfile
# Stage 1: Build Environment
FROM python:3.9-slim AS builder

# Set working directory
WORKDIR /app

# Copy only requirements.txt to cache dependencies
COPY requirements.txt .

# Install dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the entire project (code + data)
COPY . .

# Install any additional build tools (if needed)
RUN apt-get update && apt-get install -y build-essential

# Stage 2: Production Image
FROM python:3.9-slim

# Set working directory
WORKDIR /app

# Copy installed dependencies from builder stage
COPY --from=builder /usr/local/lib/python3.9/site-packages /usr/local/lib/python3.9/site-packages
COPY . .

# Expose required ports (if needed)
EXPOSE 5000

# Define the entry point
CMD ["python", "app.py"]
```

---

#### **Step 2: Build and Run Our Docker Image**
1. Build the Docker image:
   ```bash
   docker build -t scikit-ml-app .
   ```

2. Run the container:
   ```bash
   docker run -p 5000:5000 scikit-ml-app
   ```

---

### **1.3 Optimize for Smaller Images**

#### **Tips for Reducing Image Size**
1. **Use Lightweight Base Images**:
   - Use `python:3.9-slim` instead of `python:3.9`.
   - Alpine Linux (e.g., `python:3.9-alpine`) is even smaller, but compatibility issues with some ML libraries may arise.

2. **Remove Build Tools After Installation**:
   - Install tools only in the builder stage and exclude them from the production stage.

3. **Minimize Layers**:
   - Combine commands into a single `RUN` statement.
   - Example:
     ```dockerfile
     RUN apt-get update && apt-get install -y build-essential && \
         pip install --no-cache-dir -r requirements.txt
     ```

4. **Use `.dockerignore`**:
   - Exclude unnecessary files (e.g., test data, logs) from the image.
   - Example `.dockerignore`:
     ```plaintext
     __pycache__/
     .git/
     *.log
     data/
     ```

---

### **1.4 Best Practices for Multi-Stage Builds**
1. Cache dependencies by copying only `requirements.txt` first.
2. Use `--no-cache-dir` with `pip install` to avoid caching unnecessary files.
3. Regularly update base images to patch vulnerabilities.

---

